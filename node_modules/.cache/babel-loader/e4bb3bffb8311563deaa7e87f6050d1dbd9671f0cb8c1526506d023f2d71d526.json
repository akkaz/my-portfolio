{"ast":null,"code":"var _jsxFileName = \"/home/akkaz/Desktop/dev/terminal-portfolio/src/components/StreamingText/StreamingText.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useMemo } from 'react';\nimport ClickableCommand from '../ClickableCommand/ClickableCommand';\nimport './StreamingText.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StreamingText = ({\n  text,\n  onComplete,\n  onCommandClick\n}) => {\n  _s();\n  const [displayedText, setDisplayedText] = useState('');\n  const [isComplete, setIsComplete] = useState(false);\n  useEffect(() => {\n    let index = 0;\n    let timeoutId;\n    setDisplayedText(\"\");\n    setIsComplete(false);\n    const streamNextChar = () => {\n      if (index < text.length) {\n        setDisplayedText(text.substring(0, index + 1));\n        index++;\n        timeoutId = setTimeout(streamNextChar, 10);\n      } else {\n        setIsComplete(true);\n        if (onComplete) onComplete();\n      }\n    };\n    timeoutId = setTimeout(streamNextChar, 10);\n    return () => {\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, [text, onComplete]);\n\n  // List of available commands to make clickable\n  const commands = useMemo(() => ['help', 'about', 'skills', 'projects', 'contact', 'clear'], []);\n  const renderText = text => {\n    if (!text) return '';\n    const parts = [];\n    let currentIndex = 0;\n    commands.forEach(command => {\n      const commandIndex = text.toLowerCase().indexOf(command, currentIndex);\n      if (commandIndex !== -1) {\n        // Add text before the command\n        if (commandIndex > currentIndex) {\n          parts.push(text.substring(currentIndex, commandIndex));\n        }\n\n        // Add the clickable command\n        parts.push(/*#__PURE__*/_jsxDEV(ClickableCommand, {\n          command: command,\n          onCommandClick: onCommandClick\n        }, `${command}-${commandIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this));\n        currentIndex = commandIndex + command.length;\n      }\n    });\n\n    // Add remaining text\n    if (currentIndex < text.length) {\n      parts.push(text.substring(currentIndex));\n    }\n    return parts;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"streaming-text\",\n    children: [renderText(displayedText), !isComplete && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"cursor\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n_s(StreamingText, \"rg0kYgRVxVN4nsV+R7q7yT0g+hk=\");\n_c = StreamingText;\nexport default StreamingText;\nvar _c;\n$RefreshReg$(_c, \"StreamingText\");","map":{"version":3,"names":["React","useState","useEffect","useMemo","ClickableCommand","jsxDEV","_jsxDEV","StreamingText","text","onComplete","onCommandClick","_s","displayedText","setDisplayedText","isComplete","setIsComplete","index","timeoutId","streamNextChar","length","substring","setTimeout","clearTimeout","commands","renderText","parts","currentIndex","forEach","command","commandIndex","toLowerCase","indexOf","push","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["/home/akkaz/Desktop/dev/terminal-portfolio/src/components/StreamingText/StreamingText.jsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport ClickableCommand from '../ClickableCommand/ClickableCommand';\nimport './StreamingText.css';\n\nconst StreamingText = ({ text, onComplete, onCommandClick }) => {\n    const [displayedText, setDisplayedText] = useState('');\n    const [isComplete, setIsComplete] = useState(false);\n    \n    useEffect(() => {\n        let index = 0;\n        let timeoutId;\n\t\t\t\tsetDisplayedText(\"\");\n\t\t\t\tsetIsComplete(false);\n\n\t\t\t\tconst streamNextChar = () => {\n\t\t\t\t\tif (index < text.length) {\n\t\t\t\t\t\tsetDisplayedText(text.substring(0, index + 1));\n\t\t\t\t\t\tindex++;\n\t\t\t\t\t\ttimeoutId = setTimeout(streamNextChar, 10);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsetIsComplete(true);\n\t\t\t\t\t\tif (onComplete) onComplete();\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttimeoutId = setTimeout(streamNextChar, 10);\n        \n        return () => {\n\t\t\t\t\tif (timeoutId) clearTimeout(timeoutId);\n\t\t\t\t};\n    }, [text, onComplete]);\n    \n    // List of available commands to make clickable\n    const commands = useMemo(() => ['help', 'about', 'skills', 'projects', 'contact', 'clear'], []);\n\n    const renderText = (text) => {\n        if (!text) return '';\n        \n        const parts = [];\n        let currentIndex = 0;\n\n        commands.forEach((command) => {\n            const commandIndex = text.toLowerCase().indexOf(command, currentIndex);\n            \n            if (commandIndex !== -1) {\n                // Add text before the command\n                if (commandIndex > currentIndex) {\n                    parts.push(text.substring(currentIndex, commandIndex));\n                }\n                \n                // Add the clickable command\n                parts.push(\n                    <ClickableCommand \n                        key={`${command}-${commandIndex}`}\n                        command={command}\n                        onCommandClick={onCommandClick}\n                    />\n                );\n                \n                currentIndex = commandIndex + command.length;\n            }\n        });\n\n        // Add remaining text\n        if (currentIndex < text.length) {\n            parts.push(text.substring(currentIndex));\n        }\n\n        return parts;\n    };\n\n    return (\n        <div className=\"streaming-text\">\n            {renderText(displayedText)}\n            {!isComplete && <span className=\"cursor\"/>}\n        </div>\n    );\n};\n\nexport default StreamingText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}